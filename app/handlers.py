from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from loguru import logger
from pydub import AudioSegment
import os

import app.keyboards as kb
import app.database.redis as rd
from app.generators import gpt
from logger import file_logger
from app import cmd_message
from app.count_token import count_tokens
from app.split_text import split_text
from app.database.db import clear_message_history
from app.call_count_gpt import count_calls
from app.calculate_message_length import calculate_message_length
from app.transcribe_audio import transcribe_audio
from app.correct_text import correct_text
from aiogram.utils.text_decorations import markdown_decoration


router = Router()

file_logger()


class Generate(StatesGroup):
    selecting_model = State()           # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    text_input = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_response = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ gpt


@logger.catch
@router.message(F.text.in_(["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", "/start", "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"]))
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    try:
        await message.answer(cmd_message.start_message, reply_markup=kb.most_high_main)
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await state.set_state(Generate.selecting_model)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start: {err}")
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )


@logger.catch
@router.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∞ üåü")
async def command_pay(message: Message, state: FSMContext, bot: Bot):
    await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É...", reply_markup=kb.back)


@logger.catch
@router.message(F.text == "F.A.Q ‚ùì")
async def comman_faq(message: Message, state: FSMContext, bot: Bot):
    await message.reply(cmd_message.faq,
                        parse_mode=ParseMode.MARKDOWN)


@logger.catch
@router.message(F.text.in_(["–ü–æ–º–µ–Ω—è—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚Ü©Ô∏è", "–í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å üß†"]))
async def change_gpt_model(message: Message, state: FSMContext, bot: Bot):
    try:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å ü§ñ\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∞—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: gpt-4o-mini ‚ú®", reply_markup=kb.main)
        await state.set_state(Generate.selecting_model)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {err}")
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )


@logger.catch
@router.message(F.text == "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ üîÑ")
async def reset_context(message: Message, state: FSMContext, bot: Bot):
    telegram_id = message.from_user.id
    try:
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await clear_message_history(telegram_id)
        await message.reply(cmd_message.reset_context_message)
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {err}")
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        

@logger.catch
@router.message(F.text == "–ö–∞–∫—É—é –≤—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ü§î")
async def reset_context(message: Message, state: FSMContext, bot: Bot):
    await message.reply(cmd_message.about_message,
                        parse_mode=ParseMode.MARKDOWN)


@logger.catch
@router.message(F.text.in_(["‚ùéCHATGPT 4-o‚ùé", "‚úÖCHATGPT 4-o-mini‚úÖ"]))
async def select_model(message: Message, state: FSMContext):
    model_mapping = {
        "‚ùéCHATGPT 4-o‚ùé": "gpt-4o-2024-08-06",
        "‚úÖCHATGPT 4-o-mini‚úÖ": "gpt-4o-mini-2024-07-18"
    }
    model = model_mapping.get(message.text)
    
    await state.update_data(model=model)
    await state.set_state(Generate.text_input)

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {model}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üìù, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§:", reply_markup=await kb.change_model(model))


@logger.catch
@router.message(Generate.text_input)
@count_calls()
async def process_generation(message: Message, state: FSMContext, bot: Bot):

    await bot.send_chat_action(message.chat.id, "typing")

    telegram_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not await rd.check_time_spacing_between_messages(telegram_id):
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–Ω—å—à–µ 0.5 —Å–µ–∫—É–Ω–¥, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        return

    data = await state.get_data()
    model = data.get("model")

    if model is None:
        model = "gpt-4o-mini"

    if message.voice:
            try:
                DOWNLOAD_PATH = './audio_files'

                os.makedirs(DOWNLOAD_PATH, exist_ok=True)
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
                voice = message.voice

                # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                file = await bot.get_file(voice.file_id)
                file_path = f"{DOWNLOAD_PATH}/{file.file_unique_id}.ogg"
                await bot.download_file(file.file_path, file_path)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
                audio = AudioSegment.from_ogg(file_path)
                wav_path = file_path.replace('.ogg', '.wav')
                audio.export(wav_path, format='wav')

                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                transcription = await transcribe_audio(wav_path)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –æ—à–∏–±–∫–∏
                transcription_w_err = await correct_text(transcription)

                await message.answer(f"–í–∞—à —Ç–µ–∫—Å—Ç: {transcription_w_err}")

                user_input = transcription_w_err

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.remove(file_path)
                os.remove(wav_path)
            except Exception as err:
                logger.error(f"–û—à–∏–±–∫–∞ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç: {Exception}")
                await bot.edit_message_text(
                chat_id=waiting_message.chat.id,
                message_id=waiting_message.message_id,
                text=cmd_message.error_message,
                reply_markup=kb.report_an_error
                )
            finally:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã
                for root, dirs, files in os.walk(DOWNLOAD_PATH):
                    for file in files:
                        if file.endswith('.ogg') or file.endswith('.wav'):
                            file_to_remove = os.path.join(root, file)
                            if os.path.exists(file_to_remove):
                                try:
                                    os.remove(file_to_remove)
                                except Exception as file_err:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_to_remove}: {file_err}")

    else:
        user_input = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    waiting_message = await message.reply(f"–ú–æ–¥–µ–ª—å: {model}\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –≤—Å–µ–≥–æ 5-19 —Å–µ–∫—É–Ω–¥! ‚è±üöÄ\n‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚ú®")

    if model == "gpt-4o" and telegram_id != 857805093:
        await message.reply(f"–ú–æ–¥–µ–ª—å gpt-4o –≤ —Ä–µ–∂–∏–º–µ –∞–ª—å—Ñ–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å gpt-4o-mini")
        return
    
    lenght_message_user = calculate_message_length(user_input)

    if lenght_message_user >= 4096:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–ª–∏–Ω—É –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–î–ª–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {lenght_message_user}")
        await state.set_state(Generate.text_input)
        return

    current_state = await state.get_state()

    if current_state == Generate.waiting_for_response.state:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    await state.set_state(Generate.waiting_for_response)

    try:
        await bot.send_chat_action(message.chat.id, "typing")
        response = await gpt(user_input, model, telegram_id)
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ gpt: {err}")
        await bot.edit_message_text(
            chat_id=waiting_message.chat.id,
            message_id=waiting_message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        await state.set_state(Generate.text_input)
        return

    try:
        response_parts = split_text(response)

        # –¶–∏–∫–ª for –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Å–ø–∏—Å–∫–∞
        for index, part in enumerate(response_parts):
            try:
                if index == 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
                    await bot.edit_message_text(
                        chat_id=waiting_message.chat.id,
                        message_id=waiting_message.message_id,
                        text=part,
                        reply_markup=kb.report_an_error,
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                    await message.reply(
                        part,
                        reply_markup=kb.report_an_error,
                        parse_mode=ParseMode.MARKDOWN
                    )
            except Exception as err:
                logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π markdown: {err}")
                try:
                    if index == 0:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
                        await bot.edit_message_text(
                            chat_id=waiting_message.chat.id,
                            message_id=waiting_message.message_id,
                            text=markdown_decoration.quote(part),
                            reply_markup=kb.report_an_error,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                        await message.reply(
                            text=markdown_decoration.quote(part),
                            reply_markup=kb.report_an_error,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                except Exception as err:
                    logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ markdown: {err}")
                    raise Exception

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ telegram_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
            if telegram_id == 857805093:
                await message.answer(
                    f"Model: {model}\nNumber of tokens per input: {count_tokens(user_input)}\nNumber of tokens per output: {count_tokens(part)}",
                )
        
        logger.info(f"–û—Ç–≤–µ—Ç gpt –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {telegram_id}")
        await state.set_state(Generate.text_input)
        await rd.del_redis_id(telegram_id)
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {err}")
        await bot.edit_message_text(
            chat_id=waiting_message.chat.id,
            message_id=waiting_message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        await state.set_state(Generate.text_input)
        return


@logger.catch
@router.message(F.content_type.in_({'text', 'voice'}))
async def error_handling(message: Message, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state == Generate.waiting_for_response.state:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. ‚è≥")
    else:
        await message.reply("–ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ gpt-4o-mini.", reply_markup=await kb.change_model("gpt-4o-mini"))    
        await process_generation(message, state, bot)
