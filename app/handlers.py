from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.generators import gpt
from logger import file_logger
from . import cmd_message
from .count_token import count_tokens

router = Router()

class Generate(StatesGroup):
    text = State()

@logger.catch
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    file_logger()
    try:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞!")
        await state.clear()
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start: {err}")
        await message.answer(cmd_message.error)

@logger.catch
@router.message(F.text)
async def generate(message: Message, state: FSMContext):
    file_logger()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    response_message = await message.reply("‚ú® –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –≤—Å–µ–≥–æ 5-19 —Å–µ–∫—É–Ω–¥! ‚è±üöÄ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚ú®")
    await state.set_state(Generate.text)
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        response = await gpt(message.text)
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ gpt: {err}")
        await message.answer(cmd_message.error)
    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await response_message.edit_text(
            f"–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ gpt-4-o:\n\n{response}\n\n–ö–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {count_tokens(message.text+response)}", parse_mode="Markdown"
            )
        logger.info("–û—Ç–≤–µ—Ç gpt –ø–æ–ª—É—á–µ–Ω")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {err}")
        await message.reply(cmd_message.error)
    await state.clear()

@router.message(Generate.text)
async def generate_error(message: Message):
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
