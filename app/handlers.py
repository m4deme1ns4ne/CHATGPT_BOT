from aiogram import F, Router, Bot
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.utils.text_decorations import markdown_decoration
from loguru import logger
import os

from logger import file_logger
from app import cmd_message
import app.keyboards as kb
from app.database.redis import DatabaseRedis
from app.generators import GPTResponse
from app.database.db import DATABASE
from app.call_count_gpt import GPTUsageHandler
from app.etc.count_token import count_tokens
from app.etc.split_text import split_text
from app.etc.transcribe_audio import transcribe_audio
from app.etc.correct_text import correct_text


router = Router()

file_logger()


class Generate(StatesGroup):
    selecting_model = State()           # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    text_input = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_response = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ gpt


@logger.catch
@router.message(F.text.in_(["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", "/start", "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"]))
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    try:
        await message.answer(cmd_message.start_message, reply_markup=kb.most_high_main)
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await state.set_state(Generate.selecting_model)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start: {err}")
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        return


@router.message(F.text == "–ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã üåü")
async def command_pay(message: Message, state: FSMContext, bot: Bot):
    CURRENCY = "XTR"
    await message.answer_invoice(title="–ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ GPT-4o üåü",
                                 description=cmd_message.prices,
                                 payload="private",
                                 currency=CURRENCY,
                                 prices=[LabeledPrice(label=CURRENCY, amount=100)],
                                 reply_markup=await kb.payment_keyboard())


@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery) -> None:
    await query.answer(True)


@router.message(F.successful_payment)
async def successful_payment(message: Message) -> None:
    """–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    db = DATABASE()
    await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ üéâüí≥\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ *100 –∑–∞–ø—Ä–æ—Å–æ–≤* CHAT GPT 4o üöÄ",
                         parse_mode=ParseMode.MARKDOWN)
    await db.increases_count_calls(
        telegram_id=message.from_user.id,
        model="gpt-4o",
        count=100
    )


@router.message(F.text == "F.A.Q ‚ùì")
async def comman_faq(message: Message, state: FSMContext, bot: Bot):
    await message.reply(cmd_message.faq,
                        parse_mode=ParseMode.MARKDOWN)


@logger.catch
@router.message(F.text.in_(["–ü–æ–º–µ–Ω—è—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚Ü©Ô∏è", "–í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å üß†"]))
async def change_gpt_model(message: Message, state: FSMContext, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª-–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        bot (Bot): –ë–æ—Ç
    """
    try:

        telegram_id = message.from_user.id
        db = DATABASE()

        count_gpt_4o_mini = await db.get_users_call_data(telegram_id=telegram_id, 
                                                   model="gpt-4o-mini")
        count_gpt_4o = await db.get_users_call_data(telegram_id=telegram_id, 
                                              model="gpt-4o")

        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å ü§ñ\n\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n*CHAT GPT 4o mini: {count_gpt_4o_mini[0]}*\n\n*CHAT GPT 4o: {count_gpt_4o[0]}*", 
                             reply_markup=kb.main,
                             parse_mode=ParseMode.MARKDOWN)
        await state.set_state(Generate.selecting_model)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {err}")
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        return


@logger.catch
@router.message(F.text == "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ üîÑ")
async def reset_context(message: Message, state: FSMContext, bot: Bot):
    """ –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        bot (Bot): –ë–æ—Ç
    """
    telegram_id = message.from_user.id
    try:
        db = DATABASE()
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.clear_message_history(telegram_id)
        await message.reply(cmd_message.reset_context_message)
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {err}")
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        return
        

@logger.catch
@router.message(F.text == "–ö–∞–∫—É—é –≤—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ü§î")
async def reset_context(message: Message, state: FSMContext, bot: Bot):
    await message.reply(cmd_message.about_message,
                        parse_mode=ParseMode.MARKDOWN)


@logger.catch
@router.message(F.text.in_(["CHATGPT 4-o", "CHATGPT 4-o-mini"]))
async def select_model(message: Message, state: FSMContext):
    model_mapping = {
        "CHATGPT 4-o": "gpt-4o",
        "CHATGPT 4-o-mini": "gpt-4o-mini"
    }
    model = model_mapping.get(message.text)
    
    await state.update_data(model=model)
    await state.set_state(Generate.text_input)

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {model}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üìù, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§:", reply_markup=await kb.change_model(model))


@logger.catch
@router.message(Generate.text_input)
async def process_generation(message: Message, state: FSMContext, bot: Bot):

    await bot.send_chat_action(message.chat.id, "typing")

    telegram_id = message.from_user.id

    rd = DatabaseRedis()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not await rd.check_time_spacing_between_messages(telegram_id):
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–Ω—å—à–µ 0.5 —Å–µ–∫—É–Ω–¥, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        return

    data = await state.get_data()
    model = data.get("model")

    if model is None:
        model = "gpt-4o-mini"

    usage = GPTUsageHandler(telegram_id)

    success_and_data = await usage.process(model)
    success = success_and_data[0]

    if model == "gpt-4o-mini" and not success:
        hours, minutes, seconds, count = success_and_data[1]
        await message.answer(
            f"*–ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –ó–ê–ü–†–û–°–û–í!*\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ {count} –∑–∞–ø—Ä–æ—Å–æ–≤ gpt-4o-mini –≤ —Å—É—Ç–∫–∏.\n\n"
            f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gpt —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç –∏ {int(seconds)} —Å–µ–∫—É–Ω–¥.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    elif model == "gpt-4o" and not success:
        await message.answer(
            f"*–ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨ –ó–ê–ü–†–û–°–´ –º–æ–¥–µ–ª–∏ {model}*\n\n"
            f"–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ {model}.\n" 
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –µ—â—ë –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É *–ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã* üåü –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    if message.voice:
            try:
                DOWNLOAD_PATH = './audio_files'

                os.makedirs(DOWNLOAD_PATH, exist_ok=True)
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
                voice = message.voice

                # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                file = await bot.get_file(voice.file_id)
                file_path = f"{DOWNLOAD_PATH}/{file.file_unique_id}.ogg"
                await bot.download_file(file.file_path, file_path)

                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                transcription = await transcribe_audio(file_path)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                transcription_w_err = await correct_text(transcription)
                user_input = transcription_w_err

            except Exception as err:
                logger.error(f"–û—à–∏–±–∫–∞ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç: {Exception}")
                await message.reply(
                text=cmd_message.error_message_voice,
                reply_markup=kb.report_an_error
                )
                return
            finally:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã
                for root, dirs, files in os.walk(DOWNLOAD_PATH):
                    for file in files:
                        if file.endswith('.ogg') or file.endswith('.wav'):
                            file_to_remove = os.path.join(root, file)
                            if os.path.exists(file_to_remove):
                                try:
                                    os.remove(file_to_remove)
                                except Exception as file_err:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_to_remove}: {file_err}")

    else:
        user_input = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    waiting_message = await message.reply(f"–ú–æ–¥–µ–ª—å: {model}\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –≤—Å–µ–≥–æ 5-19 —Å–µ–∫—É–Ω–¥! ‚è±üöÄ\n‚ú®–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚ú®")

    current_state = await state.get_state()

    if current_state == Generate.waiting_for_response.state:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    await state.set_state(Generate.waiting_for_response)

    try:
        await bot.send_chat_action(message.chat.id, "typing")
        ai = GPTResponse()
        response = await ai.gpt_answer(question=user_input, 
                                       model_gpt=model, 
                                       telegram_id=telegram_id)
        
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ gpt: {err}")
        await bot.edit_message_text(
            chat_id=waiting_message.chat.id,
            message_id=waiting_message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        await state.set_state(Generate.text_input)
        return

    try:
        response_parts = split_text(response)

        # –¶–∏–∫–ª for –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Å–ø–∏—Å–∫–∞
        for index, part in enumerate(response_parts):
            try:
                if index == 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
                    await bot.edit_message_text(
                        chat_id=waiting_message.chat.id,
                        message_id=waiting_message.message_id,
                        text=part,
                        reply_markup=kb.report_an_error,
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                    await message.reply(
                        part,
                        reply_markup=kb.report_an_error,
                        parse_mode=ParseMode.MARKDOWN
                    )
            except Exception as err:
                logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π markdown: {err}")
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–º–µ—Ç–∫–µ markdown :(")
                try:
                    if index == 0:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
                        await bot.edit_message_text(
                            chat_id=waiting_message.chat.id,
                            message_id=waiting_message.message_id,
                            text=markdown_decoration.quote(part),
                            reply_markup=kb.report_an_error,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                        await message.reply(
                            text=markdown_decoration.quote(part),
                            reply_markup=kb.report_an_error,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                except Exception as err:
                    logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ markdown: {err}")
                    await bot.edit_message_text(
                        chat_id=waiting_message.chat.id,
                        message_id=waiting_message.message_id,
                        text=cmd_message.error_message,
                        reply_markup=kb.report_an_error
                        )
                    return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ telegram_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 857805093
            if telegram_id == 857805093:
                await message.answer(
                    f"Model: {model}\nNumber of tokens per input: {count_tokens(user_input)}\nNumber of tokens per output: {count_tokens(part)}",
                )
        
        logger.info(f"–û—Ç–≤–µ—Ç gpt –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {telegram_id}")
        await state.set_state(Generate.text_input)
        await rd.del_redis_id(telegram_id)
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {err}")
        await bot.edit_message_text(
            chat_id=waiting_message.chat.id,
            message_id=waiting_message.message_id,
            text=cmd_message.error_message,
            reply_markup=kb.report_an_error
            )
        await state.set_state(Generate.text_input)
        return


@logger.catch
@router.message(F.content_type.in_({'text', 'voice'}))
async def error_handling(message: Message, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state == Generate.waiting_for_response.state:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. ‚è≥")
    else:
        await message.reply("–ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ gpt-4o-mini.", reply_markup=await kb.change_model("gpt-4o-mini"))    
        await process_generation(message, state, bot)
