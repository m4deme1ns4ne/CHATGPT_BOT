from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from loguru import logger
from datetime import datetime, timedelta

from app.generators import gpt
from logger import file_logger
from . import cmd_message
from .count_token import count_tokens
import app.keyboards as kb

router = Router()

class Generate(StatesGroup):
    text_input = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = State()        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞


@logger.catch
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    file_logger()
    try:
        await message.answer(cmd_message.start, reply_markup=kb.main)
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start: {err}")
        await message.answer(cmd_message.error)


@logger.catch
@router.message(F.text == "–ü–æ–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å gpt")
async def change_gpt_model(message: Message, state: FSMContext):
    file_logger()
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å gpt:", reply_markup=kb.main)
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏ gpt: {err}")
        await message.answer(cmd_message.error)


@logger.catch
@router.message(F.text.in_(["–ú–æ–¥–µ–ª—å 4-o", "–ú–æ–¥–µ–ª—å 4-o-mini"]))
async def generate_gpt(message: Message, state: FSMContext):
    file_logger()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if message.text == "–ú–æ–¥–µ–ª—å 4-o":
        model = "gpt-4o"
    elif message.text == "–ú–æ–¥–µ–ª—å 4-o-mini":
        model = "gpt-4o-mini"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(model=model)

    # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {model}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb.change_model)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    await state.set_state(Generate.text_input)


@router.message(Generate.text_input)
async def process_generation(message: Message, state: FSMContext):

    telegram_id = message.from_user.id

    file_logger()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    data = await state.get_data()
    model = data.get("model")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_input = message.text
    await state.set_state(Generate.text)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    await message.reply(f"‚ú® –ú–æ–¥–µ–ª—å: {model}. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –≤—Å–µ–≥–æ 5-19 —Å–µ–∫—É–Ω–¥! ‚è±üöÄ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚ú®")

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await gpt(user_input, model)
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ gpt: {err}")
        await message.answer(cmd_message.error)
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.edit_text(
            f"–í–∞—à –æ—Ç–≤–µ—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é {model}:\n\n{response}\n\n–ö–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {count_tokens(user_input + response)}", 
            parse_mode="Markdown",
            reply_markup=kb.change_model  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏
        )
        logger.info("–û—Ç–≤–µ—Ç gpt –ø–æ–ª—É—á–µ–Ω")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {err}")
        await message.reply(cmd_message.error)
    await state.clear()


@router.message(Generate.text)
async def generate_error(message: Message):
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")


@router.message(F.text)
async def error_select_model(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å gpt", reply_markup=kb.main)
